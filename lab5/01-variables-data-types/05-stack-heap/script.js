// üîπ Stack Memory (Primitive Types ‡πÉ‡∏ä‡πâ Stack)
let a = 10;
let b = a; // ‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á b (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô)
b = 20;

console.log("a:", a); // 10
console.log("b:", b); // 20

// üîπ Heap Memory (Reference Types ‡πÉ‡∏ä‡πâ Heap)
let obj1 = { name: "Bright" };
let obj2 = obj1; // obj2 ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á obj1 (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á)

obj2.name = "John"; 

console.log("obj1:", obj1); // { name: "John" }
console.log("obj2:", obj2); // { name: "John" }

// üîπ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö Array (Heap)
let arr1 = [1, 2, 3];
let arr2 = arr1; // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà arr1

arr2.push(4); 

console.log("arr1:", arr1); // [1, 2, 3, 4]
console.log("arr2:", arr2); // [1, 2, 3, 4]

// üîπ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Copy ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Heap ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
let obj3 = { age: 25 };
let obj4 = { ...obj3 }; // ‡πÉ‡∏ä‡πâ Spread Operator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡πÉ‡∏´‡∏°‡πà
obj4.age = 30;

console.log("obj3:", obj3); // { age: 25 }
console.log("obj4:", obj4); // { age: 30 }

// üîπ ‡∏ß‡∏¥‡∏ò‡∏µ Copy Array ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ô
let arr3 = [5, 6, 7];
let arr4 = [...arr3]; // ‡πÉ‡∏ä‡πâ Spread Operator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

arr4.push(8);

console.log("arr3:", arr3); // [5, 6, 7]
console.log("arr4:", arr4); // [5, 6, 7, 8]
